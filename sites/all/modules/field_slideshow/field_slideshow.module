<?php

/**
 * @file
 * Implement a slideshow formatter for fields.
 */

/**
 * Implements hook_field_formatter_info().
 */
function field_slideshow_field_formatter_info() {
  $formatters = array(
    'slideshow' => array(
      'label'       => t('Slideshow'),
      'field types' => array('image', 'media'),
      'settings'    => array(
        'slideshow_image_style'           => '',
        'slideshow_link'                  => '',
        'slideshow_caption'               => '',
        'slideshow_caption_link'          => '',
        'slideshow_fx'                    => 'fade',
        'slideshow_speed'                 => '1000',
        'slideshow_timeout'               => '4000',
        'slideshow_order'                 => '',
        'slideshow_controls'              => 0,
        'slideshow_pause'                 => 0,
        'slideshow_pager'                 => '',
        'slideshow_pager_image_style'     => '',
        'slideshow_carousel_image_style'  => '',
        'slideshow_carousel_visible'      => '3',
        'slideshow_carousel_scroll'       => '1',
        'slideshow_carousel_speed'        => '500',
        'slideshow_carousel_vertical'     => 0,
      ),
    ),
  );
  if (module_exists('colorbox')) $formatters['slideshow']['settings']['slideshow_colorbox_image_style'] = '';

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function field_slideshow_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element['slideshow_image_style'] = array(
    '#title'          => t('Image style'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_image_style'],
    '#empty_option'   => t('None (original image)'),
    '#options'        => image_style_options(FALSE),
  );

  $links = array(
    'content' => t('Content'),
    'file'    => t('File'),
  );
  if ($field['type'] == 'media') $links += _field_slideshow_get_media_links_fields();
  $element['slideshow_link'] = array(
    '#title'          => t('Link image to'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_link'],
    '#empty_option'   => t('Nothing'),
    '#options'        => $links,
  );
  if (module_exists('colorbox')) {
    $element['slideshow_link']['#options']['colorbox'] = 'Colorbox';
    $element['slideshow_colorbox_image_style'] = array(
      '#title'          => t('Colorbox image style'),
      '#type'           => 'select',
      '#default_value'  => $settings['slideshow_colorbox_image_style'],
      '#empty_option'   => t('None (original image)'),
      '#options'        => image_style_options(FALSE),
      '#states' => array(
        'visible' => array(
          ':input[name$="[settings_edit_form][settings][slideshow_link]"]' => array('value' => 'colorbox'),
        ),
      ),
    );
  }

  if ($field['type'] == 'media') $captions = _field_slideshow_get_media_text_fields();
  else $captions = array(
    'title'   => t('Title text'),
    'alt'     => t('Alt text'),
  );
  $element['slideshow_caption'] = array(
    '#title'          => t('Caption'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_caption'],
    '#empty_option'   => t('Nothing'),
    '#options'        => $captions,
  );

  $element['slideshow_caption_link'] = array(
    '#title'          => t('Caption link'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_caption_link'],
    '#empty_option'   => t('Nothing'),
    '#options'        => $links,
    '#states' => array(
      'invisible' => array(
        ':input[name$="[settings_edit_form][settings][slideshow_caption]"]' => array('value' => ''),
      ),
    ),
  );
  if (module_exists('colorbox')) $element['slideshow_caption_link']['#options']['colorbox'] = 'Colorbox';

  $element['slideshow_fx'] = array(
    '#title'          => t('Transition effect'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_fx'],
    '#options'        => array(
      'blindX'      => t('blindX'),
      'blindY'      => t('blindY'),
      'blindZ'      => t('blindZ'),
      'cover'       => t('cover'),
      'curtainX'    => t('curtainX'),
      'curtainY'    => t('curtainY'),
      'fade'        => t('fade'),
      'fadeZoom'    => t('fadeZoom'),
      'growX'       => t('growX'),
      'growY'       => t('growY'),
      'scrollUp'    => t('scrollUp'),
      'scrollDown'  => t('scrollDown'),
      'scrollLeft'  => t('scrollLeft'),
      'scrollRight' => t('scrollRight'),
      'scrollHorz'  => t('scrollHorz'),
      'scrollVert'  => t('scrollVert'),
      'shuffle'     => t('shuffle'),
      'slideX'      => t('slideX'),
      'slideY'      => t('slideY'),
      'toss'        => t('toss'),
      'turnUp'      => t('turnUp'),
      'turnDown'    => t('turnDown'),
      'turnLeft'    => t('turnLeft'),
      'turnRight'   => t('turnRight'),
      'uncover'     => t('uncover'),
      'wipe'        => t('wipe'),
      'zoom'        => t('zoom'),
    ),
  );

  $element['slideshow_speed'] = array(
    '#title'          => t('Transition speed'),
    '#type'           => 'textfield',
    '#size'           => 5,
    '#default_value'  => $settings['slideshow_speed'],
  );

  $element['slideshow_timeout'] = array(
    '#title'          => t('Timeout'),
    '#type'           => 'textfield',
    '#size'           => 5,
    '#default_value'  => $settings['slideshow_timeout'],
    '#description'    => t('Time between transitions (ms). Enter 0 to disable automatic transitions (then, enable pager and/or controls).'),
  );

  $element['slideshow_order'] = array(
    '#title'          => t('Order'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_order'],
    '#empty_option'   => t('Normal'),
    '#options'        => array(
      'reverse' => t('Reverse'),
      'random'  => t('Random'),
    ),
  );

  $element['slideshow_controls'] = array(
    '#title'          => t('Create prev/next controls'),
    '#type'           => 'checkbox',
    '#default_value'  => $settings['slideshow_controls'],
  );

  $element['slideshow_pause'] = array(
    '#title'          => t('Pause on hover'),
    '#type'           => 'checkbox',
    '#default_value'  => $settings['slideshow_pause'],
  );

  $element['slideshow_pager'] = array(
    '#title'          => t('Pager'),
    '#type'           => 'select',
    '#options'        => array('number' => 'Slide number', 'image' => 'Image', 'carousel' => 'Carousel'),
    '#empty_option'   => t('None'),
    '#default_value'  => $settings['slideshow_pager'],
  );

  $element['slideshow_pager_image_style'] = array(
    '#title'          => t('Pager image style'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_pager_image_style'],
    '#empty_option'   => t('None (original image)'),
    '#options'        => image_style_options(FALSE),
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][slideshow_pager]"]' => array('value' => 'image'),
      ),
    ),
  );

  $element['slideshow_carousel_image_style'] = array(
    '#title'          => t('Carousel: Image style'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_carousel_image_style'],
    '#empty_option'   => t('None (original image)'),
    '#options'        => image_style_options(FALSE),
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  $element['slideshow_carousel_visible'] = array(
    '#title'          => t('Carousel: Number of visible images'),
    '#type'           => 'textfield',
    '#size'           => 2,
    '#default_value'  => $settings['slideshow_carousel_visible'],
    '#description'    => t('The number of images that are visible in the pager. Defaults to 3.'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  $element['slideshow_carousel_scroll'] = array(
    '#title'          => t('Carousel: Number of images to scroll by'),
    '#type'           => 'textfield',
    '#size'           => 2,
    '#default_value'  => $settings['slideshow_carousel_scroll'],
    '#description'    => t('The number of images scrolled with each click. Defaults to 1.'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  $element['slideshow_carousel_speed'] = array(
    '#title'          => t('Carousel: Transition speed'),
    '#type'           => 'textfield',
    '#size'           => 5,
    '#default_value'  => $settings['slideshow_carousel_speed'],
    '#description'    => t('Speed of the Carousel scroll. Defaults to 500.'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  $element['slideshow_carousel_vertical'] = array(
    '#title'          => t('Vertical Carousel'),
    '#type'           => 'checkbox',
    '#default_value'  => $settings['slideshow_carousel_vertical'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_slideshow_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['slideshow_image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['slideshow_image_style']]));
  }
  else $summary[] = t('Original image');

  $link_types = array(
    'content'   => t('content'),
    'file'      => t('file'),
    'colorbox'  => t('Colorbox'),
  );
  if ($field['type'] == 'media') $link_types += _field_slideshow_get_media_links_fields();
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['slideshow_link']])) {
    $link_type_message = t('Link to: @link', array('@link' => $link_types[$settings['slideshow_link']]));
    if ($settings['slideshow_link'] == 'colorbox') {
      $link_type_message .= ' (';
      if (isset($image_styles[$settings['slideshow_colorbox_image_style']])) {
        $link_type_message .= t('Image style: @style', array('@style' => $image_styles[$settings['slideshow_colorbox_image_style']]));
      }
      else $link_type_message .=  t('Original image');
      $link_type_message .= ')';
    }
    $summary[] = $link_type_message;
  }

  if ($field['type'] == 'media') $caption_types = _field_slideshow_get_media_text_fields();
  else $caption_types = array(
    'title' => t('Title text'),
    'alt'   => t('Alt text'),
  );
  // Display this setting only if there's a caption.
  if (isset($caption_types[$settings['slideshow_caption']])) {
    $caption_message = t('Caption: @caption', array('@caption' => $caption_types[$settings['slideshow_caption']]));
    if (isset($link_types[$settings['slideshow_caption_link']])) $caption_message .= ' (' . t('Link to: @link', array('@link' => $link_types[$settings['slideshow_caption_link']])) . ')';
    $summary[] = $caption_message;
  }

  $summary[] = t('Transition effect: @effect', array('@effect' => $settings['slideshow_fx']));
  $summary[] = t('Speed: @speed', array('@speed' => $settings['slideshow_speed']));
  $summary[] = t('Timeout: @timeout', array('@timeout' => $settings['slideshow_timeout']));
  $orders = array(
    'reverse' => t('Reverse order'),
    'random'  => t('Random order'),
  );
  if (isset($orders[$settings['slideshow_order']])) {
    $summary[] = $orders[$settings['slideshow_order']];
  }
  if (isset($settings['slideshow_controls']) && $settings['slideshow_controls']) $summary[] = t('Create prev/next controls');
  if (isset($settings['slideshow_pause']) && $settings['slideshow_pause']) $summary[] = t('Pause on hover');

  switch ($settings['slideshow_pager']) {
    case 'number':
      $summary[] = t('Pager') . ': ' . t('Slide number');
    break;
    case 'image':
      $pager_image_message = t('Pager') . ': ' . t('Image') . ' (';
      if (isset($image_styles[$settings['slideshow_pager_image_style']])) {
        $pager_image_message .= t('Image style: @style', array('@style' => $image_styles[$settings['slideshow_pager_image_style']]));
      }
      else $pager_image_message .= t('Original image');
      $pager_image_message .= ')';
      $summary[] = $pager_image_message;
    break;
    case 'carousel':
      $pager_image_message = t('Pager') . ': ' . t('Carousel') . ' (';
      if (isset($image_styles[$settings['slideshow_carousel_image_style']])) {
        $pager_image_message .= t('Image style: @style', array('@style' => $image_styles[$settings['slideshow_carousel_image_style']]));
      }
      else $pager_image_message .= t('Original image');
      $pager_image_message .= ', ' . t('Number of visible images: @visible', array('@visible' => $settings['slideshow_carousel_visible']));
      $pager_image_message .= ', ' . t('Number of images to scroll by: @scroll', array('@scroll' => $settings['slideshow_carousel_scroll']));
      $pager_image_message .= ', ' . t('Transition speed: @speed', array('@speed' => $settings['slideshow_carousel_speed']));
      if ($settings['slideshow_carousel_vertical']) $pager_image_message .= ', ' . t('Vertical');
      $pager_image_message .= ')';
      $summary[] = $pager_image_message;
    break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function field_slideshow_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Media field support
  if ($field['type'] == 'media') {
    foreach ($items as $delta => $item) {
      $items[$delta] = (array) $item;
      $items[$delta]['uri'] = $item['file']->uri;
    }
  }

  // Get correct caption
  if ($display['settings']['slideshow_caption'] != '') {
    foreach ($items as $delta => $item) {
      if ($field['type'] == 'media') {
        $items[$delta]['caption'] = $items[$delta]['file']->$display['settings']['slideshow_caption'];
        $items[$delta]['caption'] = $items[$delta]['caption'][$langcode][0]['value'];
      }
      else $items[$delta]['caption'] = $item[$display['settings']['slideshow_caption']];
    }
  }

  $links = array(
    'slideshow_link'          => 'path',
    'slideshow_caption_link'  => 'caption_path',
  );
  // Loop thru required links (because image and caption can have different links)
  foreach ($links as $setting => $path) {

    // Check if the formatter involves a link.
    $link_type = '';
    switch ($display['settings'][$setting]) {
      case 'content':
        $uri = entity_uri($entity_type, $entity);
      break;
      case 'file':
      case 'colorbox':
        $link_type = 'file';
      break;
      default:
        if ($field['type'] == 'media' && drupal_substr($display['settings'][$setting], 0, 6) == 'field_') {
          $infos = field_info_field($display['settings'][$setting]);
          $link_type = $infos['type'];
        }
      break;
    }

    // Generate special links (other than node)
    foreach ($items as $delta => $item) {
      switch ($link_type) {
        case 'file':
          $uri = array(
            'path'    => file_create_url($item['uri']),
            'options' => array(),
          );
          if ($display['settings'][$setting] == 'colorbox') {
            // check if we need a thumbnaill and change the link
            if ($display['settings']['slideshow_colorbox_image_style'] != '') {
              $uri['path'] = image_style_url($display['settings']['slideshow_colorbox_image_style'], $item['uri']);
            }
            $uri['options']['attributes'] = array(
              'class' => array('colorbox'),
              'rel'   => 'field-slideshow',
            );
            if ($display['settings']['slideshow_caption'] != '') $uri['options']['attributes']['title'] = $item['caption'];
          }
        break;
        case 'link_field':
          $pathfield = $item['file']->$display['settings'][$setting];
          $uri = array(
            'path'    => $pathfield[$langcode][0]['url'],
            'options' => array(),
          );
        break;
        case 'node_reference':
          $pathfield = $item['file']->$display['settings'][$setting];
          $uri = array(
            'path'    => drupal_get_path_alias('node/' . $pathfield[$langcode][0]['nid'], $langcode),
            'options' => array(),
          );
        break;
      }
      $items[$delta][$path] = isset($uri) ? $uri : '';
    }
    unset($uri, $link_type); // unset for next loop;
  }

  $element[] = array(
    '#theme'                => 'field_slideshow',
    '#items'                => $items,
    '#image_style'          => $display['settings']['slideshow_image_style'],
    '#fx'                   => $display['settings']['slideshow_fx'],
    '#speed'                => $display['settings']['slideshow_speed'],
    '#timeout'              => $display['settings']['slideshow_timeout'],
    '#order'                => $display['settings']['slideshow_order'],
    '#controls'             => $display['settings']['slideshow_controls'],
    '#pause'                => $display['settings']['slideshow_pause'],
    '#pager'                => $display['settings']['slideshow_pager'],
    '#pager_image_style'    => $display['settings']['slideshow_pager_image_style'],
    '#carousel_image_style' => $display['settings']['slideshow_carousel_image_style'],
    '#carousel_visible'     => $display['settings']['slideshow_carousel_visible'],
    '#carousel_scroll'      => $display['settings']['slideshow_carousel_scroll'],
    '#carousel_speed'       => $display['settings']['slideshow_carousel_speed'],
    '#carousel_vertical'    => $display['settings']['slideshow_carousel_vertical'],
  );

  return $element;
}

/**
 * Implements hook_theme().
 */
function field_slideshow_theme() {
  return array(
    'field_slideshow' => array(
      'variables'     => array(
        'items'                 => NULL,
        'image_style'           => NULL,
        'speed'                 => NULL,
        'fx'                    => NULL,
        'timeout'               => NULL,
        'order'                 => NULL,
        'controls'              => NULL,
        'pause'                 => NULL,
        'pager'                 => NULL,
        'pager_image_style'     => NULL,
        'carousel_image_style'  => NULL,
        'carousel_visible'      => NULL,
        'carousel_scroll'       => NULL,
        'carousel_speed'        => NULL,
        'carousel_vertical'     => NULL,
      ),
    ),
  );
}

/**
 * Returns HTML for a slideshow formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - items: An array of images fields.
 *   - image_style: An optional image style.
 *
 * @ingroup themeable
 */
function theme_field_slideshow($variables) {
  // Change order if needed
  if ($variables['order'] == 'reverse') $variables['items'] = array_reverse($variables['items']);
  elseif ($variables['order'] == 'random') shuffle($variables['items']);

  // Generate slides
  $field_slideshow_zebra = 'odd';
  $slides_max_width = 0;
  $slides_max_height = 0;
  $slides_output = '';
  foreach ($variables['items'] as $num => $item) {
    $classes = array('field-slideshow-slide');
    $field_slideshow_zebra = ($field_slideshow_zebra == 'odd') ? 'even' : 'odd';
    $classes[] = $field_slideshow_zebra;
    if ($num == 0) $classes[] = 'first';
    elseif ($num == count($variables['items']) - 1) $classes[] = 'last';
    $slides_output .= '<div class="' . implode(' ', $classes) . '"' . ($num != 0 ? ' style="display:none;"' : '') . '>';

    // Generate the image html
    $image['path'] = $item['uri'];
    $image['alt'] = isset($item['alt']) ? $item['alt'] : '';
    if (isset($item['title']) && drupal_strlen($item['title']) > 0) $image['title'] = $item['title'];
    if ($variables['image_style']) {
      $image['style_name'] = $variables['image_style'];
      $image_output = theme('image_style', $image);
    }
    else {
      $image_output = theme('image', $image);
    }

    // Get image sizes and add them the img tag, so height is correctly calctulated by Cycle
    if ($variables['image_style']) {
      $image_path = image_style_path($variables['image_style'], $image['path']);
      // if thumbnail is not generated, do it, so we can get the dimensions
      if (!file_exists($image_path)) {
        image_style_create_derivative(image_style_load($variables['image_style']), $image['path'], $image_path);
      }
    }
    else $image_path = $image['path'];
    $image_dims = getimagesize($image_path);
    $image_output = drupal_substr($image_output, 0, -2) . $image_dims[3] . ' />';
    if ($image_dims[0] > $slides_max_width) $slides_max_width = $image_dims[0];
    if ($image_dims[1] > $slides_max_height) $slides_max_height = $image_dims[1];

    // Generate the caption
    if (isset($item['caption']) && $item['caption'] != '') {
      $caption_output = '<div class="field-slideshow-caption"><span class="field-slideshow-caption-text">' . $item['caption'] . '</span></div>';
    }
    else $caption_output = '';

    // Add links if needed
    $links = array('path' => 'image_output');
    if (isset($item['caption']) && $item['caption'] != '') $links['caption_path'] = 'caption_output';
    // Loop thru required links (because image and caption can have different links)
    foreach ($links as $link => $out) {
      if ($item[$link]) {
        $path = $item[$link]['path'];
        $options = $item[$link]['options'];
        // When displaying an image inside a link, the html option must be TRUE.
        $options['html'] = TRUE;
        // Generate differnet rel attribute for image and caption, so colorbox doesn't double the image list
        if (isset($options['attributes']['rel'])) $options['attributes']['rel'] .= $out;
        $$out = l($$out, $path, $options);
      }
    }

    $slides_output .= $image_output . $caption_output;
    $slides_output .= '</div>'; // .fied-slideshow-slide div closed
  }

  // Generate classes
  static $field_slideshow_id = -1;
  $field_slideshow_id++;
  $classes = array('field-slideshow', 'field-slideshow-' . $field_slideshow_id, 'effect-' . $variables['fx'], 'timeout-' . $variables['timeout']);
  if ($variables['pager'] != '') $classes[] = 'with-pager';
  if ($variables['controls']) $classes[] = 'with-controls';
  $output = '<div id="field-slideshow-' . $field_slideshow_id . '-wrapper" class="field-slideshow-wrapper">
    <div class="' . implode(' ', $classes) . '" style="width:' . $slides_max_width . 'px; height:' . $slides_max_height . 'px">';

  $output .= $slides_output; // adds the slides
  $output .= '</div>'; // .field-slideshow & .field-slideshow-wrapper div closed

  if (count($variables['items']) <= 1) {
    // don't add controls if there's only one image
    $variables['controls'] = 0;
    $variables['pager'] = '';
  }

  // Add controls if needed
  if ($variables['controls']) {
    $output .= '<div id="field-slideshow-' . $field_slideshow_id . '-controls" class="field-slideshow-controls"><a href="#" class="prev">' . t('Prev') . '</a> <a href="#" class="next">' . t('Next') . '</a></div>';
  }

  // Add thumbnails pager/carousel if needed
  if ($variables['pager'] != '') {
    if ($variables['pager'] == 'image' || $variables['pager'] == 'carousel') {

      if ($variables['pager'] == 'carousel') {
        $image_style = $variables['carousel_image_style'];
        // Adds carousel wrapper and controls
        $output .= '<div id="field-slideshow-' . $field_slideshow_id . '-carousel-wrapper" class="field-slideshow-carousel-wrapper"><a href="#" class="carousel-prev">«</a><div id="field-slideshow-' . $field_slideshow_id . '-carousel" class="field-slideshow-carousel">';
      }
      else $image_style = $variables['pager_image_style'];

      $output .= '<ul id="field-slideshow-' . $field_slideshow_id . '-pager" class="field-slideshow-pager slides-' . count($variables['items']) . '">';
      foreach ($variables['items'] as $num => $item) {
        $image['path'] = $item['uri'];
        $image['alt'] = isset($item['alt']) ? $item['alt'] : '';
        if (isset($item['title']) && drupal_strlen($item['title']) > 0) $image['title'] = $item['title'];
        if ($image_style) {
          $image['style_name'] = $image_style;
          $image_output = theme('image_style', $image);
          // Get image sizes and add them the img tag
          $image_path = image_style_path($image_style, $image['path']);
          // if thumbnail is not generated, do it, so we can get the dimensions
          if (!file_exists($image_path)) {
            image_style_create_derivative(image_style_load($image_style), $image['path'], $image_path);
          }
        }
        else {
          $image_output = theme('image', $image);
          $image_path = $image['path'];
        }
        $image_dims = getimagesize($image_path);
        // adds width and height tags
        $image_output = drupal_substr($image_output, 0, -2) . $image_dims[3] . ' />';

        $output .= '<li><a href="#">' . $image_output . '</a></li>';
      }
      $output .= '</ul>';

      if ($variables['pager'] == 'carousel') {
        // close carousel wrapper and controls
        $output .= '</div><a href="#" class="carousel-next">»</a></div>';
      }

    }
    else {
      // wrapper for number pager
      $output .= '<div id="field-slideshow-' . $field_slideshow_id . '-pager" class="field-slideshow-pager slides-' . count($variables['items']) . '"></div>';
    }
  }

  $output .= '</div>'; // .field-slideshow-wrapper div closed

  // Add the Cycle plugin and the Js code
  drupal_add_js(drupal_get_path('module', 'field_slideshow') . '/js/jquery.cycle.all.min.js');
  if ($variables['pager'] == 'carousel') drupal_add_js(drupal_get_path('module', 'field_slideshow') . '/js/jcarousellite_1.0.1.min.js');
  drupal_add_js(drupal_get_path('module', 'field_slideshow') . '/js/field_slideshow.js');

  // Add js variables
  unset($variables['items']);
  drupal_add_js(array('field_slideshow' => array('field-slideshow-' . $field_slideshow_id => $variables)), 'setting');

  // Add css
  drupal_add_css(drupal_get_path('module', 'field_slideshow') . '/field_slideshow.css');

  return $output;
}

/*
 * Helper functions.
 */
function _field_slideshow_get_media_text_fields() {
  $captions = array();
  $fields = field_info_fields();
  foreach ($fields as $name => $field) {
    if (in_array('file', array_keys($field['bundles'])) && in_array('image', $field['bundles']['file']) && $field['type'] == 'text') {
      $infos = field_info_instance('file', $name, 'image');
      $captions[$name] = 'Media:' . $infos['label'];
    }
  }
  return $captions;
}

function _field_slideshow_get_media_links_fields() {
  $links = array();
  $fields = field_info_fields();
  foreach ($fields as $name => $field) {
    if (in_array('file', array_keys($field['bundles'])) && in_array('image', $field['bundles']['file']) && ($field['type'] == 'link_field' || $field['type'] == 'node_reference')) {
      $infos = field_info_instance('file', $name, 'image');
      $links[$name] = 'Media:' . $infos['label'];
    }
  }
  return $links;
}