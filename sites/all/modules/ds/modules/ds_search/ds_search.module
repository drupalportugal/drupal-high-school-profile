<?php

/**
 * @file
 * Display Suite search.
 */

/**
 * Implements hook_help().
 */
function ds_search_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/ds/search':
      $output = '<dl>';
      $output .= '<dt>' . t('Display suite defines its own search type. You need to enable it at !url and select the engine underneath you wish to use.', array('!url' => l('search settings', 'admin/config/search/settings'))) . '</dt>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function ds_search_menu() {

  $items['admin/structure/ds/search'] = array(
    'title' => 'Search',
    'description' => 'Configure search settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ds_search_settings'),
    'access arguments' => array('admin_display_suite'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ds_search_theme() {
  return array('ds_search_page' => array());
}

/**
 * Search page theming.
 */
function theme_ds_search_page($build) {

  // Check on empty search results.
  if (empty($build['search_results'])) {

    // Alter the title and extra variables.
    if (!empty($build['search_title'])) {
      $build['search_title']['#markup'] = '<h2>' . t('Your search yielded no results') . '</h2>';
      unset($build['search_extra']);
    }
    $build['search_empty'] = array('#markup' => t('<ul><li>Check if your spelling is correct.</li><li>Remove quotes around phrases to search for each word individually. <em>bike shed</em> will often show more results than <em>&quot;bike shed&quot;</em>.</li><li>Consider loosening your query with <em>OR</em>. <em>bike OR shed</em> will often show more results than <em>bike shed</em>.</li></ul>'));
  }

  return $build;
}

/**
 * Menu callback: Display Suite search settings.
 */
function ds_search_settings($form, $form_state) {

  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General'),
  );

  $engine_options = array();
  foreach (module_implements('search_info') as $module) {
    if ($module != 'ds_search' && $module != 'user') {
      $engine_options[$module] = drupal_ucfirst(str_replace('_', ' ', $module));
    }
  }

  $form['general']['ds_search_type'] = array(
    '#type' => 'select',
    '#title' => t('Search engine'),
    '#description' => t('Select the search engine as the query backend.'),
    '#options' => $engine_options,
    '#default_value' => variable_get('ds_search_type', 'node'),
  );

  $entity_view_modes = ds_entity_view_modes('node');
  foreach ($entity_view_modes as $key => $view_mode) {
    $view_mode_options[$key] = $view_mode['label'];
  }
  $form['general']['ds_search_view_mode'] = array(
    '#type' => 'select',
    '#title' => t('View mode'),
    '#description' => 'Select another view mode in favor of the default search view mode.',
    '#default_value' => variable_get('ds_search_view_mode', 'search_result'),
    '#options' => $view_mode_options,
  );

  $form['general']['ds_search_variables'] = array(
    '#type' => 'radios',
    '#options' => array(
      'none' => t('None'),
      'search_totals' => t('Total results'),
      'search_totals_plus_keywords' => t('Total results + keywords'),
      'search_totals_from_to_end' => t('Totals + start to end')
    ),
    '#title' => t('Extra variables'),
    '#description' => t('Choose an extra variable to display on the results screen.'),
    '#default_value' => variable_get('ds_search_variables', 'none'),
  );

  $form['general']['ds_search_show_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show title'),
    '#description' => t('Toggle this checkbox if you want to display the "Search results" title.'),
    '#default_value' => variable_get('ds_search_show_title', FALSE),
  );

  $form['general']['ds_search_language'] = array(
    '#type' => 'checkbox',
    '#title' => t('Language'),
    '#description' => t('Toggle this checkbox if you want only want to search in the language the site is currently in. Enable this if you have at least 2 languages.'),
    '#default_value' => variable_get('ds_search_language', FALSE),
  );

  $form['general']['ds_search_highlight'] = array(
    '#type' => 'checkbox',
    '#title' => t('Highlight search word'),
    '#description' => t('Use jQuery to highlight the word in the results.'),
    '#default_value' => variable_get('ds_search_highlight', FALSE),
  );

  $form['general']['ds_search_highlight_selector'] = array(
    '#type' => 'textfield',
    '#title' => t('HTML selector'),
    '#description' => t('Enter the css selector, if not sure, leave this by default.'),
    '#default_value' => variable_get('ds_search_highlight_selector', '.search-result'),
  );

  $form['node'] = array(
    '#type' => 'fieldset',
    '#title' => t('Drupal core'),
    '#description' => t('These settings are only applicable if the search engine is set to Node.'),
    '#states' => array(
      'visible' => array(
        'select[name="ds_search_type"]' => array('value' => 'node'),
      ),
    ),
  );

  $form['node']['ds_search_node_form_alter'] = array(
    '#type' => 'checkbox',
    '#title' => t('Form alter'),
    '#description' => t('Toggle this checkbox if you want to run the node form alter function on the basic search form. This will enable the advanced search form.'),
    '#default_value' => variable_get('ds_search_node_form_alter', FALSE),
  );

  if (module_exists('apachesolr')) {

    $form['apachesolr_search'] = array(
      '#type' => 'fieldset',
      '#title' => t('Apache Solr'),
      '#description' => t('These settings are only applicable if the search engine is set to Apache Solr.'),
      '#states' => array(
        'visible' => array(
          'select[name="ds_search_type"]' => array('value' => 'apachesolr_search'),
        ),
      ),
    );

    $form['apachesolr_search']['ds_search_apachesolr_form_alter'] = array(
      '#type' => 'checkbox',
      '#title' => t('Form alter'),
      '#description' => t('Toggle this checkbox if you want to run the Apache Solr form alter function on the basic search form. This will enable features like "Did you mean?" and the "Retain filter" checkbox.'),
      '#default_value' => variable_get('ds_search_apachesolr_form_alter', FALSE),
    );

    $form['apachesolr_search']['ds_search_apachesolr_hide_current_filters'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide Retain filters'),
      '#description' => t('Toggle this checkbox if you want to hide the "Retain current filters" checkbox.'),
      '#default_value' => variable_get('ds_search_apachesolr_hide_current_filters', FALSE),
    );
  }

  $form['user'] = array(
    '#type' => 'fieldset',
    '#title' => t('User search'),
  );

  $form['user']['ds_user_override_search_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override user search page'),
    '#description' => t('Toggle this checkbox if you want Display suite to render user search results.'),
    '#default_value' => variable_get('ds_user_override_search_page', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_search_info().
 */
function ds_search_search_info() {
  return array(
    'title' => 'Content',
    'path' => 'content',
    'conditions_callback' => 'ds_search_conditions',
  );
}

/**
 * Implements hook_node_update_index().
 */
function ds_search_update_index() {
  ds_search_invoke_node_search('update_index');
}

/**
 * Implements hook_search_status().
 */
function ds_search_search_status() {
  $status = ds_search_invoke_node_search('search_status');
  return $status;
}

/**
 * Implementation of a search_view() conditions callback.
 */
function ds_search_conditions() {
  $conditions = array();

  // Needed for Apache Solr.
  if (isset($_GET['filters']) && trim($_GET['filters'])) {
    $conditions['filters'] = trim($_GET['filters']);
  }
  return $conditions;
}

/**
 * Implements hook_search_execute().
 */
function ds_search_search_execute($keys = NULL, $conditions = NULL) {
  // Save the keys in case we need them later on.
  ds_search_get_keys($keys);

  // We will call an extra function which handles the actual search.
  // In some cases, we simply copied a lot from the original hook,
  // because some modules already called drupal_render and were unsetting
  // the #theme key. By using our own search info type, we can call
  // hook_search_page ourselves and be as flexible as we need to be.
  $ds_search_type = variable_get('ds_search_type', 'node') . '_ds_search_execute';

  // We're not going to babysit here, so call directly.
  return $ds_search_type($keys, $conditions);
}

/**
 * Save or get the search keys.
 */
function ds_search_get_keys($keys = NULL) {
  static $run, $saved_keys = FALSE;

  if (!$run) {
    $run = TRUE;
    $saved_keys = $keys;
  }
  else {
    return $saved_keys;
  }
}

/**
 * Invoke a given search hook on the node module.
 *
 * @param $hook
 *   Hook to invoke.
 */
function ds_search_invoke_node_search($hook) {

  $enabled_search_modules = variable_get('search_active_modules', array());

  // If node search is enabled, core is invoking it.
  if (isset($enabled_search_modules['node']) && $enabled_search_modules['node'] === 'node') {
    return;
  }
  else {
    $ds_search_type = variable_get('ds_search_type', 'node');
    if ($ds_search_type != 'node') {
      return;
    }
  }

  $result = module_invoke('node', $hook);
  return $result;

}

/**
 * Implements hook_search_page().
 */
function ds_search_search_page($results) {
  $build = array('#type' => 'node');
  ds_build_shared_page_variables($build);

  foreach ($results as $result) {
    $build['search_results'][$result->nid] = node_view($result, variable_get('ds_search_view_mode', 'search_result'));
  }

  return theme('ds_search_page', $build);
}

/**
 * Override search results page for users.
 */
if (variable_get('ds_user_override_search_page', FALSE)) {
  function user_search_page($results) {
    $build = array('#type' => 'user');
    global $base_url;

    ds_build_shared_page_variables($build);

    $uids = array();
    foreach ($results as $key => $result) {
      $uid = FALSE;

      // Try to get the uid from the $result['link'];
      $path = explode('/', $result['link']);
      $uid = end($path);

      // Lookup drupal path, we are most likely having an alias.
      if (!is_numeric($uid)) {
        $path = str_replace($base_url . '/', '', $result['link']);
        $alias = drupal_get_normal_path($path);
        $path = explode('/', $alias);
        $uid = end($path);
      }

      if (is_numeric($uid)) {
        $uids[] = $uid;
      }

      // Return all uids.
      if (!empty($uids)) {
        $accounts = user_load_multiple($uids);
        foreach ($accounts as $account) {
          $build['results'][$account->uid] = user_view($account, variable_get('ds_search_view_mode', 'search_result'));
        }
      }
    }

    // Return output.
    return theme('ds_search_page', $build);
  }
}

/**
 * Build shared page variables.

 * @param $build
 *   The build array.
 */
function ds_build_shared_page_variables(&$build) {
  // Search results title.
  if (variable_get('ds_search_show_title', FALSE)) {
    $build['search_title'] = array('#markup' => '<h2>' . t('Search results') . '</h2>');
  }

  // Extra variables.
  if (variable_get('ds_search_variables', 'none') != 'none') {
    $build['search_extra'] = array('#markup' => '<div class="ds-search-extra">' . ds_search_extra_variables(arg(2)) . '</div>');
  }

  // Search results.
  $build['search_results'] = array();

  // Pager.
  $build['search_pager'] = array('#markup' => theme('pager', array('tags' => NULL)));

  // CSS and JS.
  if (variable_get('ds_search_highlight', FALSE)) {
    drupal_add_css(drupal_get_path('module', 'ds_search') . '/ds_search.theme.css');
    drupal_add_js(drupal_get_path('module', 'ds_search') . '/ds_search.js');
    drupal_add_js(array(
      'ds_search' => array(
        'selector' => check_plain(variable_get('ds_search_highlight_selector', '.search-result')),
        'search' => check_plain(arg(2)),
      ),
    ), 'setting');
  }
}

/**
 * Return the extra variables.
 */
function ds_search_extra_variables($arg_keys = NULL) {
  $type = variable_get('ds_search_variables', 'none');

  // Define the number of results being shown on a page.
  // We rely on the apache solr rows for now.
  $items_per_page = variable_get('apachesolr_rows', 10);

  // Get the current page.
  $current_page = isset($_REQUEST['page']) ? $_REQUEST['page']+1 : 1;

  // Get the total number of results from the $GLOBALS.
  $total = isset($GLOBALS['pager_total_items'][0]) ? $GLOBALS['pager_total_items'][0] : 0;

  // Perform calculation
  $start = $items_per_page * $current_page - ($items_per_page - 1);
  $end = $items_per_page * $current_page;
  if ($end > $total) $end = $total;

  // Get the search keys.
  $keys = empty($arg_keys) ? trim(ds_search_get_keys()) : $arg_keys;

  // Send the right extra variable.
  switch ($type) {
    case 'search_totals':
      return t('Total results: @total.', array('@total' => $total));
      break;

    case 'search_totals_plus_keywords':
      return t('Your search for "<strong>@search</strong>" gave back @total results.', array('@search' => $keys, '@total' => $total));
      break;

    case 'search_totals_from_to_end':
      return t('Displaying @start - @end of @total results.', array('@start' => $start, '@end' => $end, '@total' => $total));
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_search_form_search_form_alter(&$form, $form_state) {

  // Drupal core
  if (variable_get('ds_search_type', 'node') == 'node' && $form['module']['#value'] == 'ds_search') {
    if (variable_get('ds_search_node_form_alter', FALSE)) {
      $form['module']['#value'] = 'node';
      node_form_search_form_alter($form, $form_state);
    }
  }

  // Apache Solr.
  if (variable_get('ds_search_type', 'node') == 'apachesolr_search' && $form['module']['#value'] == 'ds_search') {
    if (variable_get('ds_search_apachesolr_form_alter', FALSE)) {
      $form['module']['#value'] = 'apachesolr_search';
      apachesolr_search_form_search_form_alter($form, $form_state);
      if (variable_get('ds_search_apachesolr_hide_current_filters', FALSE)) {
        $form['basic']['apachesolr_search']['retain-filters']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_apachesolr_update_index().
 */
function ds_search_apachesolr_update_index(&$document, $node) {
  // Creme de la creme: Put the full node object in the index,
  // so no node_loads are needed for results in the Apache Solr engine.
  dsm($node);
  $document->addField('tm_node', urlencode(serialize(node_load($node->nid))));
}

/**
 * Implements hook_apachesolr_query_alter().
 */
function ds_search_apachesolr_query_alter($query) {

  // Get the node from the index.
  $query->addParam('fl', 'tm_node');

  // Search per language.
  if (variable_get('ds_search_language', FALSE)) {
    global $language;
    $query->add_filter('language', $language->language);
  }
}

/**
 * Search on behalf of Drupal Core.
 */
function node_ds_search_execute($keys = NULL, $conditions = NULL) {
  // Build matching conditions
  $query = db_select('search_index', 'i', array('target' => 'slave'))->extend('SearchQuery')->extend('PagerDefault');
  $query->join('node', 'n', 'n.nid = i.sid');
  $query
    ->condition('n.status', 1)
    ->addTag('node_access')
    ->searchExpression($keys, 'node');

  // Language.
  if (variable_get('ds_search_language', FALSE)) {
    global $language;
    $query->condition('n.language', $language->language);
  }

  // Insert special keywords.
  $query->setOption('type', 'n.type');
  $query->setOption('language', 'n.language');
  if ($query->setOption('term', 'ti.tid')) {
    $query->join('taxonomy_index', 'ti', 'n.nid = ti.nid');
  }
  // Only continue if the first pass query matches.
  if (!$query->executeFirstPass()) {
    return array();
  }

  // Add the ranking expressions.
  _node_rankings($query);

  // Load results.
  $find = $query
    ->limit(10)
    ->execute();
  $results = array();
  foreach ($find as $item) {
    $results[$item->sid] = node_load($item->sid);
  }
  return $results;
}

/**
 * Search on behalf of Apache Solr.
 */
function apachesolr_search_ds_search_execute($keys = NULL, $conditions = NULL) {
  $find = apachesolr_search_search_execute($keys, $conditions);
  $results = array();
  foreach ($find as $item) {
    $node = @unserialize(urldecode($item['fields']['tm_node'][0]));
    if (!isset($node->nid)) {
      $node = node_load($item['node']->entity_id);
    }
    $results[$item['node']->entity_id] = $node;
  }
  return $results;
}
